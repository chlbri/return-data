{"version":3,"file":"functions.cjs","sources":["../src/functions.ts"],"sourcesContent":["import { z } from 'zod';\n\nimport {\n  clientErrorStatusSchema,\n  informationStatusSchema,\n  permissionStatusSchema,\n  redirectStatusSchema,\n  serverErrorStatusSchema,\n  successfullStatusSchema,\n  timeoutErrorStatusSchema,\n} from './schemas/status';\n\nimport type {\n  ChainReturn,\n  ClientError,\n  Information,\n  Permission,\n  Redirect,\n  Server,\n  Success,\n  Timeout,\n  ZodPrimitive,\n} from './types';\n\nexport function isPrimitive(val: any): val is ZodPrimitive {\n  return (\n    val instanceof z.ZodNumber ||\n    val instanceof z.ZodString ||\n    val instanceof z.ZodBoolean ||\n    val instanceof z.ZodUndefined ||\n    val instanceof z.ZodArray ||\n    val instanceof z.ZodDate\n  );\n}\n\nexport function chainSchemas<T>(\n  value: T,\n  ...schemas: z.ZodType<T>[]\n): ChainReturn<T> {\n  if (!schemas[0]) return { success: true, data: value };\n  const firstSchema = schemas[0];\n  let out = firstSchema.safeParse(value);\n\n  const _schemas = schemas.slice(1);\n  for (const schema of _schemas) {\n    if (out.success) {\n      return out;\n    }\n    out = schema.safeParse(value);\n  }\n  return out;\n}\n\n// #region Checkers\n\nexport function isClientError(\n  arg: Record<string, any>,\n): arg is ClientError {\n  return clientErrorStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isInformation<T = any>(\n  arg: Record<string, any>,\n): arg is Information<T> {\n  return informationStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isPermission<T = any>(\n  arg: Record<string, any>,\n): arg is Permission<T> {\n  return permissionStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isRedirect<T = any>(\n  arg: Record<string, any>,\n): arg is Redirect<T> {\n  return redirectStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isServer(arg: Record<string, any>): arg is Server {\n  return serverErrorStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isSuccess<T = any>(\n  arg: Record<string, any>,\n): arg is Success<T> {\n  return successfullStatusSchema.safeParse(arg.status).success;\n}\n\nexport function isTimeout(arg: Record<string, any>): arg is Timeout {\n  return timeoutErrorStatusSchema.safeParse(arg.status).success;\n}\n\n// #endregion\n"],"names":["z","clientErrorStatusSchema","informationStatusSchema","permissionStatusSchema","redirectStatusSchema","serverErrorStatusSchema","successfullStatusSchema","timeoutErrorStatusSchema"],"mappings":";;;;;;;;;;;;AAwBM,SAAU,WAAW,CAAC,GAAQ,EAAA;AAClC,IAAA,QACE,GAAG,YAAYA,KAAC,CAAC,SAAS;QAC1B,GAAG,YAAYA,KAAC,CAAC,SAAS;QAC1B,GAAG,YAAYA,KAAC,CAAC,UAAU;QAC3B,GAAG,YAAYA,KAAC,CAAC,YAAY;QAC7B,GAAG,YAAYA,KAAC,CAAC,QAAQ;AACzB,QAAA,GAAG,YAAYA,KAAC,CAAC,OAAO,EACxB;AACJ,CAAC;SAEe,YAAY,CAC1B,KAAQ,EACR,GAAG,OAAuB,EAAA;AAE1B,IAAA,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;AACvD,IAAA,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEvC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,IAAA,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AAC7B,QAAA,IAAI,GAAG,CAAC,OAAO,EAAE;AACf,YAAA,OAAO,GAAG,CAAC;SACZ;AACD,QAAA,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC/B;AACD,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;AAED;AAEM,SAAU,aAAa,CAC3B,GAAwB,EAAA;IAExB,OAAOC,6CAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC/D,CAAC;AAEK,SAAU,aAAa,CAC3B,GAAwB,EAAA;IAExB,OAAOC,kDAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC/D,CAAC;AAEK,SAAU,YAAY,CAC1B,GAAwB,EAAA;IAExB,OAAOC,gDAAsB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC9D,CAAC;AAEK,SAAU,UAAU,CACxB,GAAwB,EAAA;IAExB,OAAOC,4CAAoB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC5D,CAAC;AAEK,SAAU,QAAQ,CAAC,GAAwB,EAAA;IAC/C,OAAOC,6CAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC/D,CAAC;AAEK,SAAU,SAAS,CACvB,GAAwB,EAAA;IAExB,OAAOC,8CAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAC/D,CAAC;AAEK,SAAU,SAAS,CAAC,GAAwB,EAAA;IAChD,OAAOC,+CAAwB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;AAChE,CAAC;AAED;;;;;;;;;;;;"}